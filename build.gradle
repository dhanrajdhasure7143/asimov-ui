plugins {
  id "base"
  id "java"
  id "com.github.node-gradle.node" version "2.2.4"
  id "com.bmuschko.docker-remote-api" version "6.6.1"
  id 'com.moowork.node' version '1.3.1'
}
import org.apache.tools.ant.taskdefs.condition.Os  

def ENV = project.property('ENV')

println "ENV value: $ENV"
if (ENV == 'QA' || ENV == ' Asquare') {
      println "ENV value: $ENV"
      def propertiesFile = file("gradle/${ENV}/gradle.properties")
      def myProperties = new Properties()
      myProperties.load(new FileInputStream(propertiesFile))
      def semverDevSuffix = myProperties.getProperty('semverDevSuffix')
      def semver = myProperties.getProperty('semver')
      def registryUrl = myProperties.getProperty('registryUrl')
      def imageName = myProperties.getProperty('imageName')
      
      ext {
          dockerImage = "${project.registryUrl}/${imageName}"
          dockerTag   = "${semver}-${semverDevSuffix}"
        }
      
     }
else {
      def propertiesFile = file("gradle.properties")
      def myProperties = new Properties()
      myProperties.load(new FileInputStream(propertiesFile))
      def semverDevSuffix = myProperties.getProperty('semverDevSuffix')
      def semver = myProperties.getProperty('semver')
      def registryUrl = myProperties.getProperty('registryUrl')
      def imageName = myProperties.getProperty('imageName')
      
      ext {
          dockerImage = "${project.registryUrl}/${imageName}"
          dockerTag   = "${semver}-${semverDevSuffix}"
        }
      
      
     }


task copyJarToBin {
    copy {
        from 'ezflow-service-config/asimov-ui/Dockerfile'
        into '.'
    }
    }
task copyJarToBinA {
    copy {
        from 'ezflow-service-config/asimov-ui/docker-compose.yml'
        into '.'
    }
    }

task copyJarToBinC {
    copy {
        from 'ezflow-service-config/asimov-ui/environment.ts'
        into 'src/environments'
    }
}


task copyJarToBinD {
    copy {
        from 'ezflow-service-config/asimov-ui/app.config.ts'
        into 'src/app'
    }
}

task copyJarToBinE {
    copy {
        from 'ezflow-service-config/asimov-ui/package.json'
        into '.'
    }
}

node {
  version = "14.20.0"
  npmVersion = "6.14.17"
  download = true
}

task npmInstallGlobal(type: NpmTask) {
    args = ['install', '-g']
    outputs.upToDateWhen { true }
}

//ext {
//  dockerImage = "${project.registryUrl}/${imageName}"
//  dockerTag   = "${semver}-${semverDevSuffix}"
// }

task cleanAll (type:Delete) {
  delete "${projectDir}/node_modules"
  delete "dist"
}

task buildImage(type: Exec) {
  commandLine "docker", "build", "--no-cache", "-t", "${project.dockerImage}:${project.dockerTag}", "." 
}

task pushImage(type: Exec, dependsOn: buildImage) {
  commandLine "docker", "push", "${project.dockerImage}:${project.dockerTag}"
}

task dockerized {
  dependsOn "pushImage"
}

task buildAll {
  dependsOn "clean"
  dependsOn "build"
  dependsOn "dockerized"
  tasks.findByName("build").mustRunAfter "clean"
  tasks.findByName("dockerized").mustRunAfter "build"
}

jar.dependsOn "npm_run_build"
clean.dependsOn "cleanAll"

